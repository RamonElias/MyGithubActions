# name: running-a-workflow-with-a-matrix
# run-name: workflow run by @${{ github.actor }}
#
# # on:
# #   push:
# on:
#   push:
#     branches:
#       - foobarbaz
#
#   workflow_dispatch:
#
# jobs:
#   create-new-issue:
#     uses: ./.github/workflows/create-failure-issue.yml
#     secrets: inherit
#     permissions:
#       issues: write
#     strategy:
#       matrix:
#         env: [foo, bar]
#         level: [dev, stage, prod]
#     with:
#       title: "${{ matrix.env}} ${{ matrix.level}} issue"
#       body: "Fix this ${{ matrix.env}} ${{ matrix.level}} issue"
#
#   report-issue-number:
#     runs-on: ubuntu-latest
#     needs: create-new-issue
#     steps:
#       - run: |
#           echo ${{ needs.create-new-issue.outputs.INUM }}
#           echo ${{ needs.create-new-issue.outputs.BUILD_STAGE }}

name: running-a-workflow-with-a-matrix
run-name: workflow run by @${{ github.actor }}

on:
  push:
    branches:
      - foobarbaz

  workflow_dispatch:

jobs:
  create-new-issue:
    uses: ./.github/workflows/create-failure-issue.yml
    secrets: inherit
    permissions:
      issues: write
    strategy:
      matrix:
        env: [foo, bar]
        level: [dev, stage, prod]
    with:
      title: "${{ matrix.env }}-${{ matrix.level }}"
      body: "Fix this ${{ matrix.env }} ${{ matrix.level }} issue"

  report-issue-number:
    runs-on: ubuntu-latest
    needs: create-new-issue
    steps:
      - name: Mostrar JSON crudo de outputs
        run: |
          echo '${{ toJSON(needs.create-new-issue.outputs) }}' > outputs.json
          cat outputs.json | jq

      - name: Parsear e imprimir cada combinaci√≥n
        run: |
          cat outputs.json | jq -r '
            to_entries[] 
            | select(.key|test("INUM|BUILD_STAGE|KEY")) 
            | .key + " = " + .value
          '

